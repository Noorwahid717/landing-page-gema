// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Contact {
  id         String    @id @default(cuid())
  name       String
  email      String
  phone      String?
  subject    String?
  message    String
  status     String    @default("unread") // unread, read, replied
  adminReply String?
  repliedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("contacts")
}

model Registration {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  phone     String
  school    String?
  address   String?
  program   String   @default("GEMA")
  status    String   @default("pending") // pending, approved, rejected
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("registrations")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        String   @default("info") // info, warning, success, error
  isActive    Boolean  @default(true)
  publishDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String?
  capacity    Int?
  registered  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("activities")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    String   @default("general")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("galleries")
}

model ChatMessage {
  id          String   @id @default(cuid())
  message     String
  senderName  String
  senderEmail String
  senderType  String   @default("user") // user, admin
  status      String   @default("sent") // sent, delivered, read
  sessionId   String? // Group messages by session
  replyTo     String? // Reference to message being replied to
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([sessionId])
  @@index([createdAt])
  @@map("chat_messages")
}

model ChatSession {
  id          String   @id @default(cuid())
  userEmail   String
  userName    String
  status      String   @default("active") // active, closed, waiting
  assignedTo  String? // Admin user ID
  lastMessage DateTime @default(now())
  priority    String   @default("normal") // high, normal, low
  tags        String? // JSON array of tags
  notes       String? // Admin notes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([assignedTo])
  @@index([lastMessage])
  @@map("chat_sessions")
}

model Assignment {
  id               String   @id @default(cuid())
  title            String
  description      String
  subject          String
  dueDate          DateTime
  maxSubmissions   Int      @default(30)
  status           String   @default("active") // active, closed, upcoming
  instructions     String? // JSON array of instructions
  allowedFileTypes String? // Comma separated file extensions
  maxFileSize      Int      @default(10485760) // 10MB in bytes
  createdBy        String // Admin ID
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  submissions Submission[]

  @@index([status])
  @@index([dueDate])
  @@map("assignments")
}

model Submission {
  id               String    @id @default(cuid())
  assignmentId     String
  studentId        String // Reference to Student model
  fileName         String
  originalFileName String
  filePath         String // Cloud storage URL or local path
  fileSize         Int
  mimeType         String
  submittedAt      DateTime  @default(now())
  status           String    @default("submitted") // submitted, late, reviewed, graded
  grade            Float? // Grade if applicable
  feedback         String? // Teacher feedback
  reviewedAt       DateTime?
  reviewedBy       String? // Admin ID
  isLate           Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
  @@index([studentId])
  @@index([submittedAt])
  @@map("submissions")
}

enum PortfolioSubmissionStatus {
  DRAFT
  SUBMITTED
  RETURNED
  GRADED
}

enum PortfolioArtifactType {
  EDITOR
  UPLOAD
}

enum PortfolioRubricCriterion {
  HTML_STRUCTURE
  CSS_RESPONSIVE
  JS_INTERACTIVITY
  CODE_QUALITY
  CREATIVITY_BRIEF
}

model PortfolioTask {
  id           String   @id @default(cuid())
  title        String
  description  String
  classLevel   String
  tags         String?
  instructions String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  submissions PortfolioSubmission[]

  @@unique([title, classLevel])
  @@map("portfolio_tasks")
}

model PortfolioSubmission {
  id            String                    @id @default(cuid())
  taskId        String
  studentId     String
  title         String
  summary       String?
  classLevel    String
  tags          String?
  status        PortfolioSubmissionStatus @default(DRAFT)
  lastVersionId String?                   @unique
  grade         Int?
  reviewerId    String?
  reviewerNote  String?
  submittedAt   DateTime?
  returnedAt    DateTime?
  draftHtml     String?
  draftCss      String?
  draftJs       String?
  draftArtifact PortfolioArtifactType @default(EDITOR)
  draftArchivePath String?
  draftArchiveSize Int?
  draftMetadata String?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  task        PortfolioTask         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  student     Student               @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lastVersion PortfolioVersion?     @relation("SubmissionLastVersion", fields: [lastVersionId], references: [id])
  versions    PortfolioVersion[]    @relation("SubmissionVersions")
  evaluations PortfolioEvaluation[]

  @@unique([studentId, taskId])
  @@index([taskId])
  @@index([studentId])
  @@index([status])
  @@map("portfolio_submissions")
}

model PortfolioVersion {
  id           String                @id @default(cuid())
  submissionId String
  title        String
  summary      String?
  classLevel   String
  tags         String?
  html         String?
  css          String?
  js           String?
  artifactType PortfolioArtifactType @default(EDITOR)
  archivePath  String?
  archiveSize  Int?
  metadata     String?
  createdAt    DateTime              @default(now())
  lockedAt     DateTime

  submission          PortfolioSubmission  @relation("SubmissionVersions", fields: [submissionId], references: [id], onDelete: Cascade)
  latestForSubmission PortfolioSubmission? @relation("SubmissionLastVersion")
  evaluation          PortfolioEvaluation?

  @@index([submissionId])
  @@map("portfolio_versions")
}

model PortfolioEvaluation {
  id           String                    @id @default(cuid())
  submissionId String
  versionId    String                    @unique
  reviewerId   String
  overallScore Int
  overallNote  String?
  status       PortfolioSubmissionStatus
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt

  submission   PortfolioSubmission    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  version      PortfolioVersion       @relation(fields: [versionId], references: [id], onDelete: Cascade)
  rubricScores PortfolioRubricScore[]

  @@index([submissionId])
  @@map("portfolio_evaluations")
}

model PortfolioRubricScore {
  id           String                   @id @default(cuid())
  evaluationId String
  criterion    PortfolioRubricCriterion
  score        Int
  maxScore     Int
  comment      String?

  evaluation PortfolioEvaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  @@unique([evaluationId, criterion])
  @@index([evaluationId])
  @@map("portfolio_rubric_scores")
}

model ClassroomProjectChecklist {
  id               String   @id @default(cuid())
  title            String
  slug             String   @unique
  goal             String
  skills           Json
  basicTargets     Json
  advancedTargets  Json
  reflectionPrompt String?
  order            Int      @default(0)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("classroom_project_checklists")
}

model Classroom {
  id          String        @id @default(cuid())
  title       String
  slug        String?       @unique
  description String?
  teacherId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  liveSessions LiveSession[]

  @@index([teacherId])
  @@map("classrooms")
}

model LiveSession {
  id           String      @id @default(cuid())
  classroomId  String
  startsAt     DateTime    @default(now())
  endsAt       DateTime?
  status       String      @default("scheduled")
  recordingUrl String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  attendances Attendance[]

  @@index([classroomId])
  @@map("live_sessions")
}

model Attendance {
  id        String   @id @default(cuid())
  sessionId String
  studentId String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  session LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
  @@index([studentId])
  @@map("attendances")
}

model Student {
  id           String    @id @default(cuid())
  studentId    String    @unique // NIS atau nomor identitas siswa
  email        String    @unique
  password     String
  fullName     String
  class        String? // Kelas siswa (X-A, XI-B, XII-C, dll)
  phone        String?
  address      String?
  parentName   String? // Nama orang tua/wali
  parentPhone  String? // Telepon orang tua/wali
  status       String    @default("active") // active, inactive, suspended
  isVerified   Boolean   @default(false) // Email verification
  profileImage String? // URL foto profil
  joinedAt     DateTime  @default(now())
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  submissions         Submission[]
  PortfolioSubmission PortfolioSubmission[]
  ArticleFeedback     ArticleFeedback[]
  attendances         Attendance[]

  @@index([studentId])
  @@index([status])
  @@index([class])
  @@map("students")
}

model Article {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  excerpt       String? // Short description
  content       String // Full article content (HTML/Markdown)
  category      String // tutorial, news, technology, programming, etc.
  tags          String? // JSON array of tags
  author        String // Author name
  authorId      String // Admin ID
  status        String    @default("draft") // draft, published, archived
  featured      Boolean   @default(false)
  imageUrl      String? // Featured image
  readTime      Int? // Estimated read time in minutes
  views         Int       @default(0)
  averageRating Float? // Average user rating
  totalFeedback Int       @default(0) // Total feedback count
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  feedback ArticleFeedback[]

  @@index([status])
  @@index([category])
  @@index([publishedAt])
  @@index([featured])
  @@map("articles")
}

model ArticleFeedback {
  id        String   @id @default(cuid())
  articleId String
  studentId String? // Optional: for authenticated students
  rating    Int // 1-5 stars
  comment   String? // Optional feedback comment
  challenge String? // What was most challenging
  checklist Json? // Testing checklist results
  userAgent String? // Browser information
  ipAddress String? // For spam prevention
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  // Relations
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  student Student? @relation(fields: [studentId], references: [id], onDelete: SetNull)

  @@index([articleId])
  @@index([studentId])
  @@index([rating])
  @@index([timestamp])
  @@map("article_feedback")
}
